lang JavaScript {{
    -priority- = '1';
    executable_path = '/usr/bin/node';
    file_extension = 'js';

    null_type = 'null';
    str_open = '"';
    str_close = '"';
    str_escape = '\\';
    str_newline = '\\n';
    str_tab = '\\t';

    list_open = '[';
    list_delimiter = ',';
    list_close = ']';

    obj_open = '{';
    obj_colon = ':';
    obj_delimiter = ',';
    obj_close = '}';

    triangle_expr_left = '(yield "';
    triangle_expr_right = '")';

    circle_expr_left = '" + String(';
    circle_expr_right = ') + "';

    function_wrap_left = 'function* reserved_name() {';
    function_wrap_right = '\tyield 0;\n}';
    export_string = 'module.exports = { reserved_name };';

    guest_daemon = func (){{
const net = require("net");
const server = new net.Socket();
const port = process.argv[2];
server.connect(port, "127.0.0.1", () => {
    server.write(JSON.stringify({ type: "connect", lang: "JavaScript" }));
});

let FUNC_ITER = null;

server.on("data", (data) => {
    try {
        let jsonData = JSON.parse(data);
        let ditlang_callback = null;
        let exe_ditlang = null;
        if (jsonData["type"] == "call_func") {
            var script = require(jsonData["func_path"]);
            FUNC_ITER = script.reserved_name();
        } else if (jsonData["type"] == "ditlang_callback") {
            ditlang_callback = jsonData["result"];
        }
        exe_ditlang = FUNC_ITER.next(ditlang_callback);

        if (exe_ditlang.value == 0) {
            let finishMessage = JSON.stringify({
                type: "finish_func",
                result: null,
            });
            server.write(finishMessage);
        } else {
            let exeMessage = JSON.stringify({
                type: "exe_ditlang",
                result: exe_ditlang.value,
            });
            server.write(exeMessage);
        }
    } catch (err) {
        crashMessage = JSON.stringify({
            type: "crash",
            result: err.stack,
        });
        server.write(crashMessage);
    }
});
}};
}}

lang Python {{
    executable_path = '/usr/bin/python';
    file_extension = 'py';

    null_type = 'None';
    str_open = '"';
    str_close = '"';
    str_escape = '\\';
    str_newline = '\\n';
    str_tab = '\\t';

    list_open = '[';
    list_delimiter = ',';
    list_close = ']';

    obj_open = '{';
    obj_colon = ':';
    obj_delimiter = ',';
    obj_close = '}';

    triangle_expr_left = 'exe_ditlang("';
    triangle_expr_right = '")';

    circle_expr_left = '" + str(';
    circle_expr_right = ') + "';

    function_wrap_left = 'def reserved_name(exe_ditlang):';
    function_wrap_right = '';
    export_string = '';

    guest_daemon = func (){{
import importlib.util
import json
import socket
import sys
import threading
import time
import traceback

DITLANG_CALLBACK = None
SERVER: socket.socket = None  # type: ignore


def run_client():
    global SERVER, DITLANG_CALLBACK
    port = int(sys.argv[1])
    SERVER = socket.create_connection(("127.0.0.1", port))
    SERVER.sendall(_encode({"type": "connect", "lang": "Python"}))

    while True:
        try:
            raw = SERVER.recv(1024)
            if raw:
                json_data = _decode(raw)
                try:
                    if json_data["type"] == "call_func":
                        path = json_data["func_path"]
                        name = path[path.rfind("/") + 1 :]
                        spec = importlib.util.spec_from_file_location(name, path)
                        script = importlib.util.module_from_spec(spec)
                        spec.loader.exec_module(script)  # type: ignore
                        threading.Thread(
                            target=_exe_ditlang_loop, args=[script], daemon=True
                        ).start()
                    elif json_data["type"] == "ditlang_callback":
                        DITLANG_CALLBACK = json_data["result"]
                    else:
                        raise NotImplementedError
                except:
                    _crash()
            else:
                SERVER.sendall(_encode({"type": "heart"}))

            time.sleep(0.001)  # Prevent pinning the CPU
        except BrokenPipeError:  # Server has closed
            SERVER.close()
            break


def _exe_ditlang_loop(script):
    global SERVER
    try:
        res = script.reserved_name(exe_ditlang)
        job_mes = {"type": "finish_func", "result": str(res)}
        SERVER.sendall(_encode(job_mes))
    except:
        _crash()


def exe_ditlang(value) -> str:
    global SERVER, DITLANG_CALLBACK
    SERVER.sendall(_encode({"type": "exe_ditlang", "result": value}))

    while True:
        if DITLANG_CALLBACK is not None:
            temp = DITLANG_CALLBACK
            DITLANG_CALLBACK = None
            return temp


def _crash():
    global SERVER
    tb = traceback.format_exc()
    job_mes = {"type": "crash", "result": tb}
    SERVER.sendall(_encode(job_mes))


def _encode(message: dict):
    return json.dumps(message).encode()


def _decode(message: bytes):
    return json.loads(message.decode())


run_client()

}};
}}

lang Lua {{
    executable_path = '/usr/bin/lua';
    file_extension = 'lua';

    null_type = 'nil';
    str_open = '"';
    str_close = '"';
    str_escape = '\\';
    str_newline = '\\n';
    str_tab = '\\t';

    list_open = '{';
    list_delimiter = ',';
    list_close = '}';

    obj_open = '{';
    obj_colon = ':';
    obj_delimiter = ',';
    obj_close = '}';

    triangle_expr_left = 'coroutine.yield("';
    triangle_expr_right = '")';

    circle_expr_left = '" .. tostring(';
    circle_expr_right = ') .. "';

    function_wrap_left = 'function reserved_name()';
    function_wrap_right = '\tcoroutine.yield(0)\nend\nreturn reserved_name';
    export_string = '';

    guest_daemon = func (){{
local json = require("rxi-json-lua")
local socket = require("socket")
tcp = assert(socket.tcp())
local host, port = "127.0.0.1", arg[1]
package.path = '/tmp/dit/?.lua;' .. package.path
tcp:connect(host, port);
local connectMes = json.encode({type = "connect", lang = "Lua"})
tcp:send(connectMes)

EXE_COROUTINE = nil

local function daemon_loop()
    local s, status, partial = tcp:receive()
    if status ~= "closed" then
        jsonData = json.decode(s)
        local coroutine_param = nil
        if jsonData['type'] == "call_func" then
            coroutine_param = require(string.sub(jsonData["func_path"], 10, -5))
            EXE_COROUTINE = coroutine.create(function (func_to_call)
                    func_to_call()
                end)
        elseif jsonData['type'] == "ditlang_callback" then
            coroutine_param = jsonData["result"]
        end

        local no_errors, exe_ditlang = coroutine.resume(EXE_COROUTINE, coroutine_param)
        if exe_ditlang == 0 then
            local finish_message = json.encode({type = "finish_func"})
            tcp:send(finish_message)
        else
            exeMessage = json.encode({type = "exe_ditlang", result = exe_ditlang})
            tcp:send(exeMessage)
        end
    end
end

while true do
    local status, err = pcall(daemon_loop) 
    if status == false then
        crashMessage = json.encode({type = "crash", result = err})
        tcp:send(crashMessage)
    end
end
tcp:close()
}};
}}