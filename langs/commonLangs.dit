/*
    This file stores all of the currently implemented languages,
    and also serves as a tutorial for how to implement other languages.

    A lang works a bit like a class, but cannot be instantiated.
    Instead, it just stores properties. Should support inheritance eventually.
    Inheritance will allow a single `Python` lang to support `Python2` 
    and `Python3`, and then `Python3.8` etc.
*/ 
lang SomeLang {|
    someProp = 'someValue';
|}
//print(SomeLang.someProp);

// The same lang can be 'declared' multiple times to add more properties.
lang SomeLang {|
    // Priority is a built in variable that determines property precedence.
    // Think of it like !important; or z-index in CSS.
    // For now it must be an integer in a string.
    Priority = '1';
    giraffe = 'cool';
|}

lang SomeLang {|
    // This declaration has a higher priority, so it overrides the giraffe property.
    Priority = '10';
    giraffe = 'not cool';
|}

lang JavaScript {|
    // Since this is the main implementation of JavaScript, it's left at priority 1
    // so that config files can override all it's properties.
    Priority = '1';

    /* executable_path is the main thing that will be overridden.
       overrides are based on .ditconf files. You can see an example at
       https://github.com/ditabase/dit-cli/blob/master/tests/.ditconf
    
       dit will always load every .ditconf file from the current working directory
       down to root. Every lang declaration will be loaded and merged.
       They are read as normal dit files, so they can run code if you want.
    */

    executable_path = '/usr/bin/node';
    file_extension = 'js';
    add_line_enders = "false"; // This feature was naive, doesn't work generically
    line_ender = ";";

    /* 
        This will replace a '<|' or '|>' with this JavaScript source code.
        The JS daemon uses generator functions. Each yield call sends a string of
        dit code back to dit. The dit is executed and the result is returned.
    */

    triangle_expr_left = '(yield `';
    triangle_expr_right = '`)';

    /*
        Once again, this code will replace a '(|' or '|)'
        It will always be inside an existing yield call from a triangle expression.
    */
    circle_expr_left = '` + String(';
    circle_expr_right = ') + `';

    // These simply appear at the beginning and end of a function...
    function_wrap_left = 'function* reserved_name() {';
    function_wrap_right = '\n}';
    // and at the end of a file.
    export_string = 'module.exports = { reserved_name };';

    /* 
    Consider the following complete dit function:

    sig JavaScript Str func modifySKU(Str baseSKU){|
        <|return '(|<|baseSKU|>.substring(5) + '_FINAL'|)'|>
    |}

    This would result in the following JS code, placed in a file called
    'Javascript_func_modifySku.js'

    function* reserved_name() {
        (yield "return '" + String((yield "baseSKU!").substring(5) + '_FINAL') + "'!");
        yield 0;
    }

    module.exports = { reserved_name };
    */

    // Here is the actual socket server that DitLang/Python will communicate with.
    // Remember that this is actually NodeJS.
    guest_daemon = func (){|
const net = require("net");
const SOCKET = new net.Socket();
const port = process.argv[2];
SOCKET.connect(port, "127.0.0.1", () => {
  SOCKET.write(JSON.stringify({ type: "connect", lang: "JavaScript" }));
});

let GENERATOR_STACK = [];

SOCKET.on("data", (data) => {
  try {
    let jsonData = JSON.parse(data);
    let genParam = null;
    let genResult = null;
    if (jsonData["type"] == "call_func") {
      // importing the actual function from file
      var script = require(jsonData["func_path"]);
      gen = script.reserved_name();
      GENERATOR_STACK.push(gen);
    } else if (jsonData["type"] == "ditlang_callback") {
      // we executed some ditLang code, and genParam is now the result
      genParam = jsonData["result"];
      gen = GENERATOR_STACK[GENERATOR_STACK.length - 1];
    } else if (jsonData["type"] == "return_keyword") {
      return finish();
    } else {
      throw new Error("Unknown message type");
    }
    // .next either starts the generator function,
    // or resumes from the previous yield point.
    // genParam will be used as the value of the yield expression.
    genResult = gen.next(genParam);

    if (genResult.done) {
      finish();
    } else {
      // genResult.value is ditLang code we need to execute
      let exeMessage = JSON.stringify({
        type: "exe_ditlang",
        result: genResult.value,
      });
      SOCKET.write(exeMessage);
    }
  } catch (err) {
    crashMessage = JSON.stringify({
      type: "crash",
      result: err.stack,
    });
    SOCKET.write(crashMessage);
  }
});

function finish() {
  GENERATOR_STACK.pop();
  let finishMessage = JSON.stringify({
    type: "finish_func",
    result: null,
  });
  SOCKET.write(finishMessage);
}

|};
|}

lang Python {|
    /*
        DitLang is implemented in Python currently, but it might not be in the future.
        This is mostly for consistency and testing.
        I also want to add explicit 'integrated' guestlangs, meaning Python
        could be executed with `eval` or similar.

        Also note that lang names are considered not global to their namespace,
        but entirely universal. Every lang called `Python` in any file is considered
        the same. The only difference is the priority. This will change somewhat when
        langs support inheritance in the future.
    */
    Priority = '1';
    executable_path = '/usr/bin/python';
    file_extension = 'py';

    add_line_enders = "false";

    triangle_expr_left = '(yield ("""';
    triangle_expr_right = '"""))';

    circle_expr_left = '""" + str(';
    circle_expr_right = ') + """';

    function_wrap_left = 'def reserved_name():';
    function_wrap_right = '';
    export_string = '';

    guest_daemon = func (){|
import importlib.util
import json
import socket
import sys
import time
import traceback

SERVER: socket.socket = None  # type: ignore
GENERATOR_STACK = []


def run_client():
    global SERVER
    port = int(sys.argv[1])
    SERVER = socket.create_connection(("127.0.0.1", port))
    SERVER.sendall(_encode({"type": "connect", "lang": "Python"}))

    while True:
        try:
            _daemon_loop()
        except BrokenPipeError:  # Server has closed
            SERVER.close()
            break
        except:
            tb = traceback.format_exc()
            crash_message = {"type": "crash", "result": tb}
            SERVER.sendall(_encode(crash_message))


def _daemon_loop() -> None:
    global SERVER, GENERATOR_STACK
    raw = SERVER.recv(1024)
    if raw:
        json_data = _decode(raw)
        gen_param = None
        if json_data["type"] == "call_func":
            script = _get_script(json_data["func_path"])
            gen = script.reserved_name()  # type: ignore
            GENERATOR_STACK.append(gen)
        elif json_data["type"] == "ditlang_callback":
            gen_param = json_data["result"]
            gen = GENERATOR_STACK[-1]
        elif json_data["type"] == "return_keyword":
            # The function ended with a return keyword,
            # this message is just letting us know.
            return _end()
        else:
            raise ValueError("Unknown message type")

        try:
            gen_result = gen.send(gen_param)
            exe_message = _encode({"type": "exe_ditlang", "result": gen_result})
            SERVER.sendall(exe_message)
        except StopIteration:
            _end()
    else:
        SERVER.sendall(_encode({"type": "heart"}))
    time.sleep(0.001)  # Prevent pinning the CPU


def _end() -> None:
    GENERATOR_STACK.pop()
    finish_message = _encode({"type": "finish_func", "result": None})
    SERVER.sendall(finish_message)


def _get_script(path: str):
    name = path[path.rfind("/") + 1 :]
    spec = importlib.util.spec_from_file_location(name, path)
    script = importlib.util.module_from_spec(spec)  # type: ignore
    spec.loader.exec_module(script)  # type: ignore
    return script


def _encode(message: dict):
    return json.dumps(message).encode()


def _decode(message: bytes):
    return json.loads(message.decode())


run_client()

|};
|}

lang Lua {|
    Priority = '1';
    executable_path = '/usr/bin/lua';
    file_extension = 'lua';

    add_line_enders = "false";

    triangle_expr_left = 'coroutine.yield([[';
    triangle_expr_right = ']])';

    circle_expr_left = ']] .. tostring(';
    circle_expr_right = ') .. [[';

    function_wrap_left = 'function reserved_name()';
    function_wrap_right = '\tcoroutine.yield(0)\nend\nreturn reserved_name';
    export_string = '';

    guest_daemon = func (){|
local json = require("rxi-json-lua")
local socket = require("socket")
SOCKET = assert(socket.tcp())
local host, port = "127.0.0.1", arg[1]
package.path = '/tmp/dit/?.lua;' .. package.path
SOCKET:connect(host, port);
local connectMes = json.encode({type = "connect", lang = "Lua"})
SOCKET:send(connectMes)

GENERATOR_STACK = {}

local function finish()
    table.remove(GENERATOR_STACK)
    local finish_message = json.encode({type = "finish_func", result = nil})
    SOCKET:send(finish_message)
end

local function daemon_loop()
    local s, status, partial = SOCKET:receive()
    if status ~= "closed" then
        local jsonData = json.decode(s)
        local genParam = nil
        local gen = nil
        if jsonData['type'] == "call_func" then
            genParam = require(string.sub(jsonData["func_path"], 10, -5))
            gen = coroutine.create(function (func_to_call)
                    func_to_call()
                end)
            table.insert(GENERATOR_STACK, gen)
        elseif jsonData['type'] == "ditlang_callback" then
            genParam = jsonData["result"]
            gen = GENERATOR_STACK[#GENERATOR_STACK]
        elseif jsonData['type'] == "return_keyword" then
            return finish()
        else
            error("Unknown message type")
        end

        local no_errors, genResult = coroutine.resume(gen, genParam)
        if genResult == 0 then
            finish()
        else
            local exeMessage = json.encode({type = "exe_ditlang", result = genResult})
            SOCKET:send(exeMessage)
        end
    end
end

while true do
    local status, err = pcall(daemon_loop)
    if status == false then
        local crashMessage = json.encode({type = "crash", result = err})
        SOCKET:send(crashMessage)
    end
end

SOCKET:close()
|};
|}
