import Numbers from 'https://raw.githubusercontent.com/isaiahshiner/dits/master/dits/Number.dit';
import Strings from 'https://raw.githubusercontent.com/isaiahshiner/dits/master/dits/StringSpacesOnly.dit';

Measurement {
    Numbers.Number magnitude;
    Strings.StringSpacesOnly units;
    print Javascript {{ return `${@@magnitude.value} ${@@units.value}`; }}
}

Length {
    extends Measurement;
    print Measurement;
    validator Javascript {{
        let num = parseFloat(@@magnitude.value)
        if (num < 0) {
            return `Number "${num}" is negative.`;
        }
        return true;
    }}
}

LengthInch {
    extends Length;
    print Length;
    validator Javascript {{
        let units = @@units.value;
        if (units != 'inches') {
            return `Units "${units}" was not inches.`;
        }
        return true;
    }}
}

LengthInchPunct {
    extends LengthInch;
    print Javascript {{ 
        // Notice the " so will be 36" instead of 36 inches
        return `${@@magnitude.value}"`; 
    }}
}

Length2D {
    Length length;
    Length width;
    print Javascript {{ return `${@@print(width)} x ${@@print(length)}`; }}
    validator Javascript {{
        let len = parseFloat(@@length.magnitude.value);
        let wid = parseFloat(@@width.magnitude.value);
        if (len < wid) {
            return `length "${len}" < width "${wid}". Length must be greater.`;
        }
        return true;
    }}
}

Length l(mag, uni) {
    magnitude.value = mag;
    units.value = uni;
}

LengthInchPunct inch(mag, uni) {
    magnitude.value = mag;
    units.value = uni;
}